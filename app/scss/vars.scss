/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include grid-media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */


/**
 * Tell when breakpoints start.
 */

$lap-start: 681px !default;
$desk-start: 1025px !default;
$desk-wide-start: 1280px !default;
$desk-small: 1100px !default;
$lap-small: 900px !default;
$palm-end: $lap-start - 1px;
$lap-end: $desk-start - 1px;
@mixin grid-media-query($media-query) {
    @if $media-query==palm {
        @media only screen and (max-width: $palm-end) {
            @content;
        }
    }
    @if $media-query==lap {
        @media only screen and (min-width: $lap-start) and (max-width: $lap-end) {
            @content;
        }
    }
    @if $media-query==lap-and-up {
        @media only screen and (min-width: $lap-start) {
            @content;
        }
    }
    @if $media-query==portable {
        @media only screen and (max-width: $lap-end) {
            @content;
        }
    }
    @if $media-query==desk {
        @media only screen and (min-width: $desk-start) {
            @content;
        }
    }
    @if $media-query==desk-wide {
        @media only screen and (min-width: $desk-wide-start) {
            @content;
        }
    }
    @if $media-query==small-desk {
        @media only screen and (min-width: $desk-start) and (max-width: $desk-small) {
            @content;
        }
    }
    @if $media-query==large-desk {
        @media only screen and (min-width: $desk-small) {
            @content;
        }
    }
    @if $media-query==small-lap {
        @media only screen and (min-width: $lap-start) and (max-width: $lap-small) {
            @content;
        }
    }
    @if $media-query==large-lap {
        @media only screen and (min-width: $lap-small) and (max-width: $lap-end) {
            @content;
        }
    }
}

// Responsive helper to JS technique
body:before {
    display: none;
    @include grid-media-query(palm) {
        content: 'palm';
    }
    @include grid-media-query(lap) {
        content: 'lap';
    }
    @include grid-media-query(desk) {
        content: 'desk';
    }
    // because sometimes it's help
    @include grid-media-query(desk-wide) {
        content: 'desk-wide';
    }
}